from typing import List, Dict


class TheoreticalFinancialAnalysisService:
    """
    Servi√ßo respons√°vel por fornecer explica√ß√µes te√≥ricas sobre conceitos e estrat√©gias financeiras,
    permitindo ao usu√°rio um entendimento completo dos termos e m√©todos aplicados em an√°lises financeiras.
    """

    def __init__(self):
        self.finance_concepts = {
            "ROI": "O Retorno sobre o Investimento (ROI) √© uma m√©trica usada para avaliar a efici√™ncia de um investimento. Ele √© calculado pela f√≥rmula: (Lucro L√≠quido / Custo do Investimento) * 100.",
            "Payback": "O Per√≠odo de Payback √© o tempo necess√°rio para recuperar o valor investido em um projeto ou investimento.",
            "Margem de Contribui√ß√£o": "A Margem de Contribui√ß√£o √© a diferen√ßa entre a receita de vendas e os custos vari√°veis, usada para cobrir custos fixos e gerar lucro.",
            "Ponto de Equil√≠brio": "O Ponto de Equil√≠brio √© o n√≠vel de vendas em que a receita total iguala os custos totais, resultando em lucro zero.",
            "Juros Compostos": "Os Juros Compostos referem-se ao c√°lculo de juros sobre o montante inicial, al√©m dos juros acumulados de per√≠odos anteriores.",
        }

    def explain_financial_concept(self, concept: str) -> str:
        """
        Explica um conceito financeiro te√≥rico com base na solicita√ß√£o do usu√°rio.

        Args:
            concept (str): O conceito financeiro solicitado.

        Returns:
            str: Explica√ß√£o detalhada do conceito.
        """
        return self.finance_concepts.get(
            concept, "Desculpe, o conceito solicitado n√£o foi encontrado."
        )

    def list_available_concepts(self) -> List[str]:
        """
        Lista todos os conceitos financeiros dispon√≠veis para explica√ß√£o.

        Returns:
            List[str]: Lista de conceitos financeiros.
        """
        return list(self.finance_concepts.keys())

    def suggest_investment_strategies(self) -> str:
        """
        Sugere estrat√©gias de investimento com base em diferentes perfis de investidor.

        Returns:
            str: Sugest√µes de estrat√©gias de investimento.
        """
        return (
            "1. **Perfil Conservador**: Opte por investimentos de baixo risco, como t√≠tulos de renda fixa ou CDBs.\n"
            "2. **Perfil Moderado**: Considere uma combina√ß√£o de renda fixa com a√ß√µes de empresas s√≥lidas e fundos imobili√°rios.\n"
            "3. **Perfil Agressivo**: A√ß√µes de crescimento, criptomoedas e startups podem proporcionar maiores retornos, mas com risco elevado.\n"
        )

    def generate_theoretical_report(self, conceitos_solicitados: List[str]) -> str:
        """
        Gera um relat√≥rio te√≥rico detalhado explicando todos os conceitos financeiros solicitados.

        Args:
            conceitos_solicitados (List[str]): Lista de conceitos financeiros que o usu√°rio deseja aprender.

        Returns:
            str: Relat√≥rio te√≥rico detalhado.
        """
        report = "üìö **Relat√≥rio Te√≥rico Financeiro**\n\n"
        for conceito in conceitos_solicitados:
            explicacao = self.explain_financial_concept(conceito)
            report += f"**{conceito}**:\n{explicacao}\n\n"
        return report
